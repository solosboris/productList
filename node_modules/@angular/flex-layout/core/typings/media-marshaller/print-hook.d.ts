import { MediaChange } from '../media-change';
import { BreakPoint } from '../breakpoints/break-point';
import { LayoutConfigOptions } from '../tokens/library-config';
import { BreakPointRegistry, OptionalBreakPoint } from '../breakpoints/break-point-registry';
/**
 * Interface to apply PrintHook to call anonymous `target.updateStyles()`
 */
import * as ɵngcc0 from '@angular/core';
export interface HookTarget {
    activatedBreakpoints: BreakPoint[];
    updateStyles(): void;
}
export declare const BREAKPOINT_PRINT: {
    alias: string;
    mediaQuery: string;
    priority: number;
};
/**
 * PrintHook - Use to intercept print MediaQuery activations and force
 *             layouts to render with the specified print alias/breakpoint
 *
 * Used in MediaMarshaller and MediaObserver
 */
export declare class PrintHook {
    protected breakpoints: BreakPointRegistry;
    protected layoutConfig: LayoutConfigOptions;
    protected _document: any;
    constructor(breakpoints: BreakPointRegistry, layoutConfig: LayoutConfigOptions, _document: any);
    /** Add 'print' mediaQuery: to listen for matchMedia activations */
    withPrintQuery(queries: string[]): string[];
    /** Is the MediaChange event for any 'print' @media */
    isPrintEvent(e: MediaChange): Boolean;
    /** What is the desired mqAlias to use while printing? */
    get printAlias(): string[];
    /** Lookup breakpoints associated with print aliases. */
    get printBreakPoints(): BreakPoint[];
    /** Lookup breakpoint associated with mediaQuery */
    getEventBreakpoints({ mediaQuery }: MediaChange): BreakPoint[];
    /** Update event with printAlias mediaQuery information */
    updateEvent(event: MediaChange): MediaChange;
    private registeredBeforeAfterPrintHooks;
    private isPrintingBeforeAfterEvent;
    private registerBeforeAfterPrintHooks;
    /**
     * Prepare RxJs filter operator with partial application
     * @return pipeable filter predicate
     */
    interceptEvents(target: HookTarget): (event: MediaChange) => void;
    /** Stop mediaChange event propagation in event streams */
    blockPropagation(): (event: MediaChange) => boolean;
    /**
     * Save current activateBreakpoints (for later restore)
     * and substitute only the printAlias breakpoint
     */
    protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]): void;
    /** For any print de-activations, reset the entire print queue */
    protected stopPrinting(target: HookTarget): void;
    /**
     * To restore pre-Print Activations, we must capture the proper
     * list of breakpoint activations BEFORE print starts. OnBeforePrint()
     * is supported; so 'print' mediaQuery activations are used as a fallback
     * in browsers without `beforeprint` support.
     *
     * >  But activated breakpoints are deactivated BEFORE 'print' activation.
     *
     * Let's capture all de-activations using the following logic:
     *
     *  When not printing:
     *    - clear cache when activating non-print breakpoint
     *    - update cache (and sort) when deactivating
     *
     *  When printing:
     *    - sort and save when starting print
     *    - restore as activatedTargets and clear when stop printing
     */
    collectActivations(event: MediaChange): void;
    /** Is this service currently in Print-mode ? */
    private isPrinting;
    private queue;
    private deactivations;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PrintHook>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtaG9vay5kLnRzIiwic291cmNlcyI6WyJwcmludC1ob29rLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZWRpYUNoYW5nZSB9IGZyb20gJy4uL21lZGlhLWNoYW5nZSc7XG5pbXBvcnQgeyBCcmVha1BvaW50IH0gZnJvbSAnLi4vYnJlYWtwb2ludHMvYnJlYWstcG9pbnQnO1xuaW1wb3J0IHsgTGF5b3V0Q29uZmlnT3B0aW9ucyB9IGZyb20gJy4uL3Rva2Vucy9saWJyYXJ5LWNvbmZpZyc7XG5pbXBvcnQgeyBCcmVha1BvaW50UmVnaXN0cnksIE9wdGlvbmFsQnJlYWtQb2ludCB9IGZyb20gJy4uL2JyZWFrcG9pbnRzL2JyZWFrLXBvaW50LXJlZ2lzdHJ5Jztcbi8qKlxuICogSW50ZXJmYWNlIHRvIGFwcGx5IFByaW50SG9vayB0byBjYWxsIGFub255bW91cyBgdGFyZ2V0LnVwZGF0ZVN0eWxlcygpYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhvb2tUYXJnZXQge1xuICAgIGFjdGl2YXRlZEJyZWFrcG9pbnRzOiBCcmVha1BvaW50W107XG4gICAgdXBkYXRlU3R5bGVzKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBCUkVBS1BPSU5UX1BSSU5UOiB7XG4gICAgYWxpYXM6IHN0cmluZztcbiAgICBtZWRpYVF1ZXJ5OiBzdHJpbmc7XG4gICAgcHJpb3JpdHk6IG51bWJlcjtcbn07XG4vKipcbiAqIFByaW50SG9vayAtIFVzZSB0byBpbnRlcmNlcHQgcHJpbnQgTWVkaWFRdWVyeSBhY3RpdmF0aW9ucyBhbmQgZm9yY2VcbiAqICAgICAgICAgICAgIGxheW91dHMgdG8gcmVuZGVyIHdpdGggdGhlIHNwZWNpZmllZCBwcmludCBhbGlhcy9icmVha3BvaW50XG4gKlxuICogVXNlZCBpbiBNZWRpYU1hcnNoYWxsZXIgYW5kIE1lZGlhT2JzZXJ2ZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUHJpbnRIb29rIHtcbiAgICBwcm90ZWN0ZWQgYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRSZWdpc3RyeTtcbiAgICBwcm90ZWN0ZWQgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zO1xuICAgIHByb3RlY3RlZCBfZG9jdW1lbnQ6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihicmVha3BvaW50czogQnJlYWtQb2ludFJlZ2lzdHJ5LCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnMsIF9kb2N1bWVudDogYW55KTtcbiAgICAvKiogQWRkICdwcmludCcgbWVkaWFRdWVyeTogdG8gbGlzdGVuIGZvciBtYXRjaE1lZGlhIGFjdGl2YXRpb25zICovXG4gICAgd2l0aFByaW50UXVlcnkocXVlcmllczogc3RyaW5nW10pOiBzdHJpbmdbXTtcbiAgICAvKiogSXMgdGhlIE1lZGlhQ2hhbmdlIGV2ZW50IGZvciBhbnkgJ3ByaW50JyBAbWVkaWEgKi9cbiAgICBpc1ByaW50RXZlbnQoZTogTWVkaWFDaGFuZ2UpOiBCb29sZWFuO1xuICAgIC8qKiBXaGF0IGlzIHRoZSBkZXNpcmVkIG1xQWxpYXMgdG8gdXNlIHdoaWxlIHByaW50aW5nPyAqL1xuICAgIGdldCBwcmludEFsaWFzKCk6IHN0cmluZ1tdO1xuICAgIC8qKiBMb29rdXAgYnJlYWtwb2ludHMgYXNzb2NpYXRlZCB3aXRoIHByaW50IGFsaWFzZXMuICovXG4gICAgZ2V0IHByaW50QnJlYWtQb2ludHMoKTogQnJlYWtQb2ludFtdO1xuICAgIC8qKiBMb29rdXAgYnJlYWtwb2ludCBhc3NvY2lhdGVkIHdpdGggbWVkaWFRdWVyeSAqL1xuICAgIGdldEV2ZW50QnJlYWtwb2ludHMoeyBtZWRpYVF1ZXJ5IH06IE1lZGlhQ2hhbmdlKTogQnJlYWtQb2ludFtdO1xuICAgIC8qKiBVcGRhdGUgZXZlbnQgd2l0aCBwcmludEFsaWFzIG1lZGlhUXVlcnkgaW5mb3JtYXRpb24gKi9cbiAgICB1cGRhdGVFdmVudChldmVudDogTWVkaWFDaGFuZ2UpOiBNZWRpYUNoYW5nZTtcbiAgICBwcml2YXRlIHJlZ2lzdGVyZWRCZWZvcmVBZnRlclByaW50SG9va3M7XG4gICAgcHJpdmF0ZSBpc1ByaW50aW5nQmVmb3JlQWZ0ZXJFdmVudDtcbiAgICBwcml2YXRlIHJlZ2lzdGVyQmVmb3JlQWZ0ZXJQcmludEhvb2tzO1xuICAgIC8qKlxuICAgICAqIFByZXBhcmUgUnhKcyBmaWx0ZXIgb3BlcmF0b3Igd2l0aCBwYXJ0aWFsIGFwcGxpY2F0aW9uXG4gICAgICogQHJldHVybiBwaXBlYWJsZSBmaWx0ZXIgcHJlZGljYXRlXG4gICAgICovXG4gICAgaW50ZXJjZXB0RXZlbnRzKHRhcmdldDogSG9va1RhcmdldCk6IChldmVudDogTWVkaWFDaGFuZ2UpID0+IHZvaWQ7XG4gICAgLyoqIFN0b3AgbWVkaWFDaGFuZ2UgZXZlbnQgcHJvcGFnYXRpb24gaW4gZXZlbnQgc3RyZWFtcyAqL1xuICAgIGJsb2NrUHJvcGFnYXRpb24oKTogKGV2ZW50OiBNZWRpYUNoYW5nZSkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTYXZlIGN1cnJlbnQgYWN0aXZhdGVCcmVha3BvaW50cyAoZm9yIGxhdGVyIHJlc3RvcmUpXG4gICAgICogYW5kIHN1YnN0aXR1dGUgb25seSB0aGUgcHJpbnRBbGlhcyBicmVha3BvaW50XG4gICAgICovXG4gICAgcHJvdGVjdGVkIHN0YXJ0UHJpbnRpbmcodGFyZ2V0OiBIb29rVGFyZ2V0LCBicExpc3Q6IE9wdGlvbmFsQnJlYWtQb2ludFtdKTogdm9pZDtcbiAgICAvKiogRm9yIGFueSBwcmludCBkZS1hY3RpdmF0aW9ucywgcmVzZXQgdGhlIGVudGlyZSBwcmludCBxdWV1ZSAqL1xuICAgIHByb3RlY3RlZCBzdG9wUHJpbnRpbmcodGFyZ2V0OiBIb29rVGFyZ2V0KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUbyByZXN0b3JlIHByZS1QcmludCBBY3RpdmF0aW9ucywgd2UgbXVzdCBjYXB0dXJlIHRoZSBwcm9wZXJcbiAgICAgKiBsaXN0IG9mIGJyZWFrcG9pbnQgYWN0aXZhdGlvbnMgQkVGT1JFIHByaW50IHN0YXJ0cy4gT25CZWZvcmVQcmludCgpXG4gICAgICogaXMgc3VwcG9ydGVkOyBzbyAncHJpbnQnIG1lZGlhUXVlcnkgYWN0aXZhdGlvbnMgYXJlIHVzZWQgYXMgYSBmYWxsYmFja1xuICAgICAqIGluIGJyb3dzZXJzIHdpdGhvdXQgYGJlZm9yZXByaW50YCBzdXBwb3J0LlxuICAgICAqXG4gICAgICogPiAgQnV0IGFjdGl2YXRlZCBicmVha3BvaW50cyBhcmUgZGVhY3RpdmF0ZWQgQkVGT1JFICdwcmludCcgYWN0aXZhdGlvbi5cbiAgICAgKlxuICAgICAqIExldCdzIGNhcHR1cmUgYWxsIGRlLWFjdGl2YXRpb25zIHVzaW5nIHRoZSBmb2xsb3dpbmcgbG9naWM6XG4gICAgICpcbiAgICAgKiAgV2hlbiBub3QgcHJpbnRpbmc6XG4gICAgICogICAgLSBjbGVhciBjYWNoZSB3aGVuIGFjdGl2YXRpbmcgbm9uLXByaW50IGJyZWFrcG9pbnRcbiAgICAgKiAgICAtIHVwZGF0ZSBjYWNoZSAoYW5kIHNvcnQpIHdoZW4gZGVhY3RpdmF0aW5nXG4gICAgICpcbiAgICAgKiAgV2hlbiBwcmludGluZzpcbiAgICAgKiAgICAtIHNvcnQgYW5kIHNhdmUgd2hlbiBzdGFydGluZyBwcmludFxuICAgICAqICAgIC0gcmVzdG9yZSBhcyBhY3RpdmF0ZWRUYXJnZXRzIGFuZCBjbGVhciB3aGVuIHN0b3AgcHJpbnRpbmdcbiAgICAgKi9cbiAgICBjb2xsZWN0QWN0aXZhdGlvbnMoZXZlbnQ6IE1lZGlhQ2hhbmdlKTogdm9pZDtcbiAgICAvKiogSXMgdGhpcyBzZXJ2aWNlIGN1cnJlbnRseSBpbiBQcmludC1tb2RlID8gKi9cbiAgICBwcml2YXRlIGlzUHJpbnRpbmc7XG4gICAgcHJpdmF0ZSBxdWV1ZTtcbiAgICBwcml2YXRlIGRlYWN0aXZhdGlvbnM7XG59XG4iXX0=